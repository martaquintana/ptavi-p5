Práctica 5 - Sesión SIP
Protocolos para la Transmisión de Audio y Vı́deo en Internet
Versión 8.0.1 - 6.11.2017

Ejercicios

Creación de repositorio para la práctica

1. Con el navegador, dirı́gete al repositorio ptavi-p5 en la cuenta del profesor en GitHub1 y realiza un fork, de manera que consigas tener una copia del repositorio en tu cuenta de GitHub. Clona el repositorio que acabas de crear a local para poder editar los archivos. Trabaja a partir de ahora en ese repositorio, sincronizando los cambios que vayas realizando.

Como tarde al final de la práctica, deberás realizar un push para subir tus cambios a tu repositorio en GitHub. En esta práctica, al contrario que con las demás, se recomienda hacer frecuentes commits, pero el push al final.

Análisis de una sesión SIP

Se ha capturado una sesión SIP con Ekiga (archivo sip.cap.gz), que se puede abrir con Wireshark2 . Se pide rellenar las cuestiones que se plantean en este guión en el fichero p5.txt que encontrarás también en el repositorio.

2. Observa que las tramas capturadas corresponden a una sesión SIP con Ekiga, un cliente de VoIP para GNOME. Responde a las siguientes cuestiones:

* ¿Cuántos paquetes componen la captura? 

954 paquetes.

* ¿Cuánto tiempo dura la captura? 

56.149345 segundos.

* ¿Qué IP tiene la máquina donde se ha efectuado la captura?
 
192.168.1.34 

¿Se trata de una IP pública o de una IP privada?¿Por qué lo sabes? 

Una IP privada, porque está entre las direcciones privadas 192.168.0.0 - 192.168.255.255 .


3. Antes de analizar las tramas, mira las estadı́sticas generales que aparecen en el menú de Statistics. En el apartado de jerarquı́a de protocolos (Protocol Hierarchy) se puede ver el porcentaje del tráfico correspondiente al protocolo TCP y UDP.
* ¿Cuál de los dos es mayor?
 
UDP con 96.2% de paquetes. 

¿Tiene esto sentido si estamos hablando de una aplicación que transmite en tiempo real? 

Sí, porque UDP no necesita establecer antes una conexión por lo tanto los paquetes van a llegar más rápido, y si es en tiempo real tampoco nos importa que se pierda algún paquete(UDP no tiene reenvíos, por lo tanto no te asegura que llegue).

* ¿Qué otros protocolos podemos ver en la jerarquı́a de protocolos? 

IPv4, ARP, UDP, STUN, SIP, RTP, RTCP, DNS, TCP, ICMP.

¿Cuáles crees que son señal y cuales ruido?

A nosotros nos interesan son los protocolos UDP, SIP, RTP y RTCP. Los demás no nos interesan tanto en esta práctica.


4. Observa por encima el flujo de tramas en el menú de Statistics en IO Graphs. La captura que estamos viendo incluye desde la inicialización (registro) de la aplicación hasta su finalización, con una llamada entremedias.

* Filtra por sip para conocer cuándo se envı́an paquetes SIP. ¿En qué segundos tienen lugar esos envı́os? 

El REGISTER en 7.343770 seg. y la llamada con INVITE en 16.233522 seg. 

* Y los paquetes con RTP, ¿cuándo se envı́an?
 
A partir del segundo 17.229331 entre el INVITE y el BYE.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]


5. Analiza las dos primeras tramas de la captura.

* ¿Qué servicio es el utilizado en estas tramas? 

ekiga.net con el protocolo DNS. 

* ¿Cuál es la dirección IP del servidor de nombres del ordenador que ha lanzado Ekiga? 

80.58.61.250

* ¿Qué dirección IP (de ekiga.net) devuelve el servicio de nombres? 

86.64.162.35


6. A continuación, hay más de una docena de tramas TCP/HTTP.

* ¿Podrı́as decir la URL que se está pidiendo? 

http://ekiga.net/ip/

* ¿Qué user agent (UA) la está pidiendo? 

Ekiga

* ¿Qué devuelve el servidor? 

HTTP/1.1 200 OK Y responde con: 83.36.48.212 .

* Si lanzamos el navegador web, por ejemplo, Mozilla Firefox, y vamos a la misma URL, ¿qué recibimos? 

Recibimos una dirección ip: 212.128.255.8 

¿Qué es, entonces, lo que está respondiendo el servidor? 

El servidor nos responde con la dirección ip con la que nos ven desde fuera.


7. Hasta la trama 45 se puede observar una secuencia de tramas del protocolo STUN.

* ¿Por qué se hace uso de este protocolo?

Porque estamos usando la IP privada/local y el servidor necesita la IP pública y el puerto, que ha sido abierto por NAT para permitir el tráfico entrante a la red del cliente.
 
* ¿Podrı́as decir si estamos tras un NAT o no?

Sí, porque NAT  permite utilizar direcciones privadas para acceder a Internet y es lo que está pasando en la captura.


8. La trama 46 es la primera trama SIP. En un entorno como el de Internet, lo habitual es desconocer la dirección IP de la otra parte al realizar una llamada. Por eso, todo usuario registra su localización en un servidor Registrar. El Registrar guarda información sobre los usuarios en un servidor de localización que puede ser utilizado para localizar usuarios.

* ¿Qué dirección IP tiene el servidor Registrar? 

El servidor/(proxy del servidor) tiene la dirección 86.64.162.35 .

* ¿A qué puerto (del servidor Registrar) se envı́an los paquetes SIP?

 Al puerto 5060.

* ¿Qué método SIP utiliza el UA para registrarse? 

REGISTER

* Además de REGISTER, ¿podrı́as decir qué instrucciones SIP entiende el UA? 

INVITE, ACK, BYE, (SUBSCRIBE como aparece en la captura le da error 489 Unsupported event package pero en otros casos también debería entenderlo). Solo he puesto los que aparecen en la captura pero SIP tiene más métodos.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]


9. Fijémonos en las tramas siguientes a la número 46:

* ¿Se registra con éxito en el primer intento? 

No, el servidor le manda un mensaje 401 Unauthorized (paquete 50).

* ¿Cómo sabemos si el registro se ha realizado correctamente o no?
 
Porque el servidor te manda un Status: 200 OK, como podemos ver en el paquete 54.

* ¿Podrı́as identificar las diferencias entre el primer intento y el segundo de registro? (fı́jate en el tamaño de los paquetes y mira a qué se debe el cambio)  

En el segundo intento en el paquete 51, aparece la cabecera Authoriaztion con los atributos username, realm, nonce, uri, algorithm y response.

* ¿Cuánto es el valor del tiempo de expiración de la sesión? Indica
las unidades. 

Expires:3600 (3600 segundos --> 1 Hora)


10. Una vez registrados, podemos efectuar una llamada. Vamos a probar con el servicio de eco de Ekiga que nos permite comprobar si nos hemos conectado correctamente. El servicio de eco tiene la dirección sip:500@ekiga.net. Veamos el INVITE de cerca.

* ¿Puede verse el nombre del que efectúa la llamada, ası́ como su dirección SIP?

Sí, aparece en la cabecera From y Contact en el paquete 103 (donde manda el INVITE).

* ¿Qué es lo que contiene el cuerpo de la trama?

Mensajes de los formatos que puede usar RTP/AVP. 

¿En qué formato/protocolo está? 

SDP.

* ¿Tiene éxito el primer intento? 

No

¿Cómo lo sabes?

Porque recibe un mensaje de 407 Proxy Authentication Required.

* ¿En qué se diferencia el segundo INVITE más abajo del primero? 

Que aparece la cabecera Proxy-Authorization con el username, realm, nonce, uri algorithm y response.

*¿A qué crees que se debe esto? 

Que el proxy necesita saber que es quien dice ser, que se autentifique y que esté autorizado.


11. Una vez conectado, estudia el intercambio de tramas.

* ¿Qué protocolo(s) se utiliza(n)? 

RTP y H.261

*¿Para qué sirven estos protocolos?

RTP sirve para comunicación en tiempo real y H.261 es un estándar de video.

* ¿Cuál es el tamaño de paquete de los mismos?

De RTP sí, siempre son 1712 bits/ 214 bytes.
H.261 varía de tamaño.

* ¿Se utilizan bits de padding?

No, Padding esta a False en los RTP.

* ¿Cuál es la periodicidad de los paquetes (en origen; nota que la captura es en destino)?

Timestamp-->bytes --> 160bytes --> (64000 bps*(160*8bit)) 50 paquetes por segundo --> 20ms

* ¿Cuántos bits/segundo se envı́an?

64Kbps

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]


12. Vamos a ver más a fondo el intercambio RTP. En Telephony hay una opción RTP. Empecemos mirando los flujos RTP.

* ¿Cuántos flujos hay? ¿por qué?

Dos uno de audio y uno de video, en el invite en el SDP donde se describe la sesión, nos indica el tipo de media, el protocolo y el formato.
El de Audio es RTP/AVP y con formato ITU-T G.711 y el de Video es RTP/AVP 31 y con formato ITU-T H.261.
Esto también se puede ver mejor en Telephony RTP.

* ¿Cuántos paquetes se pierden?

No se pierde ningún paquete, fijándonos en los números de secuencia, no se salta ningún número y todos van en orden.
Y en Telephony RTP lost en ambos flujos es 0% de paquetes se han perdido.

* ¿Cuál es el valor máximo del delta? ¿Y qué es lo que significa el
valor de delta?

maxdelta para H.261 (Video) --> 1290.479 ms 
maxdelta para G.711 (Audio) --> 1290.444 ms 
Es el tiempo que pasa entre dos paquetes consecutivos del mismo medio(audio o video).

* ¿Cuáles son los valores de jitter (medio y máximo)? 

Para H.261 (Video)--> jittermedio = 183.096 ; jittermax = 153.240;
Para G.711 (Audio) --> jittermedio = 119.635 ; jittermax = 42.500;

¿Qué quiere decir eso? ¿Crees que estamos ante una conversación de calidad?

No es una conversación de calidad porque el jitter del video es muy grande.



13. Elige un paquete RTP de audio. Analiza el flujo de audio en Telephony-> RTP -> Stream Analysis.
* ¿Cuánto valen el delta y el jitter para el primer paquete que ha llegado?

delta = 0 y jitter = 0  porque es el primer paquete.

* ¿Podemos saber si éste es el primer paquete que nos han enviado?

Si, porque es el paquete con menor número de secuencia, y es el único paquete que va a tener TimeStamp a 0 y Marker a True.

* Los valores de jitter son menores de 10ms hasta un paquete dado. ¿Cuál?

Hasta el paquete  247, pasa de un jitter de 5.76ms a 38.82ms.

* ¿A qué se debe el cambio tan brusco del jitter?

Que hay más trafico en la red, hay latencia y los paquetes han llegado mucho más tarde de lo que deberían.

* ¿Es comparable el cambio en el valor de jitter con el del delta?
¿Cual es más grande?
El jitter que es la variación del retardo, por lo tanto cambia el tiempo entre paquetes.
El de la delta es mucho más grande. (Del paquete 247: jitter=38.82ms y delta= 554.74ms)


14. En Telephony selecciona el menú VoIP calls. Verás que se lista la llamada de voz IP capturada en una ventana emergente. Selecciona esa llamada y pulsa el botón Graph.

* ¿Cuánto dura la conversación?

Empieza en 14.426793 y acaba en 39.229683 por lo tanto la conversaciónn dura --> 24.802890 segundos.

* ¿Cuáles son sus SSRC? ¿Por qué hay varios SSRCs? ¿Hay CSRCs?

Para H.261 (Video) --> SSRC = 0x43306582
Para G.711 (Audio) --> SSRC = 0xbf4afd37

En Thelephony, RTP, RTP Streams, aparecen los SSRCs, hay dos, porque hay dos flujos, uno para audio y otro para video. No aparece ningún CSRC.


15. Identifica la trama donde se finaliza la conversación.

* ¿Qué método SIP se utiliza?

BYE

* ¿En qué trama(s)?

En la trama SIP paquete 924, 925, 927 y 933.

* ¿Por qué crees que se envı́a varias veces?
Porque ha olvidado la dirección del servidor y ICMP manda un mensaje de que el puerto es inalcanzable.


16. Finalmente, se cierra la aplicación de VozIP.

* ¿Por qué aparece una instrucción SIP del tipo REGISTER?

Porque se está dando de baja como hacíamos en la Práctica 4, con un Expires: 0 .

* ¿En qué trama sucede esto?

En la trama SIP del paquete 950.

* ¿En qué se diferencia con la instrucción que se utilizó con anterioridad (al principio de la sesión)?

Como he dicho antes, en el Expires, ahora es 0 y antes era 3600.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]



Captura de una sesión SIP

17.Dirígete a la web de IPTel3con el navegador y créate una cuenta SIP.
Recibirás un correo electrónico de confirmación en la dirección que has indicado al registrarte. 
Hecho.

18.  Lanza Ekiga, y configúralo con los datos de la cuenta que te acabas de crear. Para ello, puedes ir al menú “Editar” y seleccionar “Cuentas”. Tendrás que rellenar los campos de manera similar a lo que se puede ver en la imagen a continuación (recuerda poner tu nombre de usuario en lugar de “grex”). Comprueba que estás conectado (En la barra al final de la ventana podrás ver “Connected”). Al terminar, cierra completamente Ekiga. 
Hecho.

19. Captura una sesión SIP de una conversación con el número SIP sip:music@sip.iptel.org.
Recuerda que has de comenzar a capturar tramas antes de arrancar Ekiga para ver todo el proceso4. 
Hecho.

20. Observa las diferencias en el inicio de la conversación entre el entorno del laboratorio y el del ejercicio anterior5:
*¿Se utilizan DNS y STUN? ¿Por qué?

No, porque estoy utilizando mi ip publica.

*¿Son diferentes el registro y la descripción de la sesión?

Tienen las mismas características a grandes rasgos.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

21. Identifica las diferencias existentes entre esta conversación y la conversación
anterior:
* ¿Cuántos flujos tenemos?

Solo 2 de audio de ida y de vuelta.

* ¿Cuál es su periodicidad?

Timestamp-->bytes --> 320bytes 

* ¿Cuánto es el valor máximo del delta y los valores medios y máximo del jitter?

Max delta es 39.862 en nuestra ip 212.128.255.8 y max delta en 212.79.111.155 es 37.313.
El jitter: 212.128.255.8--> meanjitter= 0.209 y maxjitter=5.180
	   212.79.111.155--> meanjitter= 0.257 y maxjitter= 2.514

* ¿Podrías reproducir la conversación desde Wireshark? ¿Cómo?

Sí, en Telephony VoIPCalls, seleccionando la llamada y dando a play streams podriamos reproducirlo, pero en este ordenador nos da un error de que el codec no se soporta o el stream esta vacío.

Comprueba que poniendo un valor demasiado pequeño para el buffer de jitter, la conversación puede no tener la calidad necesaria. 
*¿Sabrías decir qué tipo de servicio ofrece sip:music@iptel.org?

Nos ofrece musica.




22.Filtra por los paquetes SIP de la captura y guarda únicamente los paquetes SIP como p5.pcapng. Abre el fichero guardado para cerciorarte de que lo has hecho bien. Deberás añadirlo al repositorio.
[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]
[Al terminar la práctica, realiza un push para sincronizar tu repositorio GitHub]

